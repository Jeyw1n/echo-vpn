from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.enums.parse_mode import ParseMode
from aiogram.types import (
    Message,
    ReplyKeyboardRemove,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputFile,
    FSInputFile
)

from loguru import logger
from decouple import config, UndefinedValueError
import yaml
import database
from datetime import datetime, timedelta
import sys

import database

from aiogram_bot.markups import menu_keyboard
from aiogram_bot.texts_loader import texts

menu_router = Router()

photo_2 = FSInputFile('media/guide_2.png')
photo_3 = FSInputFile('media/guide_3.png')
photo_4 = FSInputFile('media/guide_4.png')
photo_support = FSInputFile('media/support.png')


@menu_router.message(F.text == 'üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')
async def instruction(msg: Message) -> None:
    await msg.answer(texts['guide_1'], parse_mode='Markdown', disable_web_page_preview=True)
    await msg.answer_photo(photo=photo_2, caption=texts['guide_2'])
    await msg.answer_photo(photo=photo_3, caption=texts['guide_3'])
    await msg.answer_photo(photo=photo_4, caption=texts['guide_4'])


@menu_router.message(F.text == 'üîë –ö–ª—é—á–∏')
async def show_keys(msg: Message) -> None:
    keys = database.get_user_keys(msg.from_user.id)
    if not keys:
        # –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "üí≥ –û–ø–ª–∞—Ç–∞"
        await msg.answer('–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É.')
        return

    keys_count = len(keys)
    keys_word = '–∫–ª—é—á' if keys_count == 1 else '–∫–ª—é—á–∞' if keys_count < 5 else '–∫–ª—é—á–µ–π'
    # –ï—Å–ª–∏ –≤—Å–µ-—Ç–∞–∫–∏ –∫–ª—é—á–∏ –µ—Å—Ç—å
    await msg.answer(f'–£ –≤–∞—Å {len(keys)} {keys_word}. üîë\n–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –µ—â–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞–≤ *\"üí≥ –ù–æ–≤—ã–π –∫–ª—é—á\"*\n\n'
                     f'*–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–ª—é—á–µ–π:*')
    for key in keys:
        remaining_time = database.get_remaining_time(key.key_id)
        # formatted_time = utils.format_remaining_time(remaining_time)
        await msg.answer(f'*–°–µ—Ä–≤–µ—Ä:* VendekVPN ‚ñ∫ Netherlands üá≥üá±\n\n'
                         f'–í–∞—à –∫–ª—é—á: _#{key.key_id}_\n'
                         f'–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: _{remaining_time}_'
                         f'```{key.access_url + texts['connection_name']}```')
    return


@menu_router.message(F.text == 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
async def support(msg: Message) -> None:
    await msg.answer_photo(photo=photo_support, caption=texts['support_message'])


@menu_router.message(F.text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ')
async def info(msg: Message) -> None:
    await msg.answer(texts['about'])


@menu_router.message(F.text == '–†–µ—Ñ–µ—Ä–∞–ª—ã ü§ù')
async def info(msg: Message) -> None:
    await msg.answer(f'–ü–æ–∫–∞-—á—Ç–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –Ω–æ –≤–∞—à–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è.\n'
                     f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:\nhttps://t.me/vendek\_vpn\_bot/?start={msg.from_user.id}')