from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from loguru import logger

from aiogram_bot.markups import choose_month_count
import database
from paymaster import create_payment
import config as conf

payment_router = Router(name=__name__)


def key_check(key: str) -> tuple[bool, bool]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–ª—é—á, —á—Ç–æ –æ–Ω –Ω–æ–≤—ã–π, –ª–∏–±–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π.
    :param key: –ö–ª—é—á, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ callback data.
    :return: –ö–æ—Ä—Ç–µ–∂ –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π. –ù–æ–≤—ã–π –ª–∏ –∫–ª—é—á –∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—é—á.
    """
    try:
        key_is_new = (key == 'new')
        key_exists = False
        if not key_is_new:
            key_exists = database.key_exists(int(key))  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—é—á
        return key_is_new, key_exists
    except Exception as ex:
        logger.error(ex)
        return False, False


@payment_router.callback_query(F.data.startswith('pay_key_'))
async def handle_pay_key_cb(callback_query: CallbackQuery):
    key = callback_query.data.split('_')[2]

    await callback_query.answer()
    if key == 'new':
        await callback_query.message.delete()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.answer(
        text=f'–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ —Å–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–ª—é—á*{'' if key == 'new' else ' #' + key}*: ‚åõ\n_–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:_',
        reply_markup=choose_month_count(key=key))


@payment_router.callback_query(F.data.startswith('month_'))
async def handle_month_selection(callback_query: CallbackQuery):
    month_data = callback_query.data.split('_')
    month = int(month_data[1])  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞
    key = month_data[2]  # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á
    month_word = '–º–µ—Å—è—Ü' if month == 1 else '–º–µ—Å—è—Ü–∞'  # –§–æ—Ä–º—ã —Å–ª–æ–≤–∞ '–º–µ—Å—è—Ü'
    key_is_new, key_exists = key_check(key)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
    if month not in [1, 2, 3] or (not key_is_new and not key_exists):
        logger.error(f'Callback –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ—Å—è—Ü–∞ –∏ –∫–ª—é—á–∞! (month:{month}) (key:{key})')
        await callback_query.answer('–û—à–∏–±–∫–∞! –ü–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞
    amount = month * conf.MONTH_PRICE
    description = f'–û–ø–ª–∞—Ç–∞ –∑–∞ {month} {month_word} –¥–ª—è –∫–ª—é—á–∞ {'' if key == 'new' else '#' + key} | VendekNET'

    try:
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        confirmation_url, payment_id = create_payment(amount=amount,description=description)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ë–î
        transaction_created = database.create_transaction(
            payment_id=payment_id,
            telegram_id=str(callback_query.from_user.id),
            message_id=str(callback_query.message.message_id),
            key_id=key,
            months=month
        )
        if not transaction_created:
            await callback_query.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!')
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {payment_id}')
            return

        await callback_query.answer()
        await callback_query.message.delete()

        payment_message = (
            f'üí≥ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞*{'' if key == 'new' else ' #' + key}* –Ω–∞ {month} {month_word}, '
            f'–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ *{int(amount)}‚ÇΩ*.\n\n'
            f'‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ *10 –º–∏–Ω—É—Ç*.\n\n'
            f'üîó –î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:'
        )
        button = InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', url=confirmation_url)
        await callback_query.message.answer(text=payment_message,
                                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[button]]))
    except Exception as e:
        await callback_query.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞!')
        logger.error(e)
