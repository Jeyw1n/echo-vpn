from datetime import timedelta, datetime
import logging
import ipaddress

from quart import Quart, request, jsonify, abort
from loguru import logger
from aiogram import Bot

import config as conf
import database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add("./logs/webhook.log", level='INFO')

app = Quart(__name__)


def is_trusted_ip(ip):
    try:
        ip_obj = ipaddress.ip_address(ip)
    except ValueError:
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP-–∞–¥—Ä–µ—Å: {ip}")
        return False
    for trusted_ip in conf.TRUSTED_IP:
        if ip_obj in ipaddress.ip_network(trusted_ip):
            return True
    logger.warning(f"IP-–∞–¥—Ä–µ—Å {ip} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º.")
    return False


API_TOKEN = conf.BOT_TOKEN
bot = Bot(token=API_TOKEN)


async def handle_successful_payment(payment_id: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂."""
    transaction = database.get_transaction(payment_id)
    logger.debug(transaction)
    if not transaction:
        logger.warning(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å payment_id {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return jsonify({"status": "transaction not found"}), 404

    telegram_id = transaction.telegram_id
    # message_id = transaction.message_id
    key_id = transaction.key_id
    months = transaction.months

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if database.mark_transaction_successful(payment_id):
        logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {payment_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å.")

        try:
            user = await bot.get_chat(chat_id=telegram_id)
            # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
            for admin_id in conf.ADMINS:
                await bot.send_message(
                    chat_id=admin_id,
                    text=f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ({payment_id}) –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.\n'
                    f'key_id: {key_id}\n'
                    f'months: {months}\n'
                    f'telegram_id: {telegram_id}\n'
                    f'user: @{user.username}'
                )
        except Exception as ex:
            logger.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {ex}')

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º message_id
        # await delete_message(telegram_id, message_id)

        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –∫–ª—é—á –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        if key_id == 'new':
            expiration_date = datetime.now() + timedelta(days=months * 30)
            database.add_key(telegram_id, expiration_date)
            success_message = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –Ω–æ–≤—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! üéâ\n" \
                              f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: *{months * 30} –¥–Ω–µ–π*."
            await bot.send_message(chat_id=telegram_id, text=success_message, parse_mode='Markdown')
        elif database.key_exists(int(key_id)):
            database.extend_key(int(key_id), months * 30)
            success_message = "üîÑ –í–∞—à –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω! üîÑ\n" \
                              f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ *{months * 30} –¥–Ω–µ–π*."
            await bot.send_message(chat_id=telegram_id, text=success_message, parse_mode='Markdown')

    return jsonify({"status": "success"}), 200


# async def delete_message(telegram_id: str, message_id: int):
#     """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram."""
#     try:
#         await bot.delete_message(chat_id=telegram_id, message_id=message_id)
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@app.before_request
async def before_request():
    ip = request.headers.get('X-Forwarded-For', request.remote_addr).split(',')[0].strip()

    if not is_trusted_ip(ip):
        logger.warning(f"–ù–µ–¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç: {ip} –∫ –ø—É—Ç–∏: {request.path}")
        return abort(403)


@app.route('/webhook', methods=['POST'])
async def notification_webhook():
    # # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ IP –∞–¥—Ä–µ—Å–∞ –æ—Ç –Æ–ú–∞–Ω–∏
    # ip = request.remote_addr
    # if not is_trusted_ip(ip):
    #     return abort(403)

    data = await request.get_json()
    logger.debug(f"Webhook –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ: {data}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    if data.get("event") == "payment.succeeded":
        payment_id = data.get("object").get('id')
        logger.debug(payment_id)
        return await handle_successful_payment(payment_id)

    logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {data.get('event')}")
    return jsonify({"status": "ignored"}), 200


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80)
