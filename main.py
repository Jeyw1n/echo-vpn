from datetime import datetime, timedelta
import sys

import telebot
from telebot import types
from telebot.types import ReplyKeyboardMarkup

from loguru import logger
from decouple import config, UndefinedValueError
import yaml

import database as db
import utils

logger.add("./logs/main.log")

try:
    API_TOKEN = config('BOT_TOKEN')
except UndefinedValueError:
    logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å "BOT_TOKEN"! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª.')
    sys.exit(1)

bot = telebot.TeleBot(API_TOKEN)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ –∏–∑ YAML-—Ñ–∞–π–ª–∞
def load_texts(file_path):
    with open(file_path, 'r', encoding='utf-8') as f:
        return yaml.safe_load(f)


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤
texts = load_texts('texts.yaml')

# –°–ø–∏—Å–æ–∫ —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
menu_buttons = ['üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', 'üîë –ö–ª—é—á–∏', '–†–µ—Ñ–µ—Ä–∞–ª—ã ü§ù', 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', '‚ÑπÔ∏è –ò–Ω—Ñ–æ']


def keyboard_create(buttons: list[str]) -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ReplyKeyboardMarkup –∏–∑ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫.
    :param buttons: –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    :return: Markup –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*buttons)
    return markup


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ —Ç–∞–º –Ω–µ—Ç.
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ –≤ db_save_result (True - —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è, False - —É–∂–µ –µ—Å—Ç—å –≤ –ë–î)
    db_save_result = db.add_user(user_id)
    # –ú–µ–Ω—é-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    markup = keyboard_create(menu_buttons)

    if db_save_result:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —Ç–æ –¥–∞—ë–º 10—Ç–∏ –¥–Ω–µ–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø.
        expiration_date = datetime.now() + timedelta(days=10)
        db.add_key(user_id, expiration_date)

        bot.send_message(message.chat.id, texts['welcome_message'], parse_mode='Markdown')
        bot.send_message(message.chat.id, texts['menu'], reply_markup=markup, parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, f'*–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!*\n'
                                          '–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω —Å–µ–≥–æ–¥–Ω—è?', reply_markup=markup,
                         parse_mode='Markdown')
        bot.send_message(message.chat.id, texts['menu'], reply_markup=markup, parse_mode='Markdown')


@bot.message_handler(commands=['menu'])
def menu(message):
    markup = keyboard_create(menu_buttons)
    bot.send_message(message.chat.id, texts['menu'], reply_markup=markup, parse_mode='Markdown')


@bot.message_handler(func=lambda message: message.text == "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
def instruction(message):
    bot.send_message(message.chat.id, texts['guide_1'], parse_mode='Markdown', disable_web_page_preview=True)
    with open('media/guide_2.png', 'rb') as guide_2:
        bot.send_photo(message.chat.id, photo=guide_2, caption=texts['guide_2'], parse_mode='Markdown',
                       show_caption_above_media=True)
    with open('media/guide_3.png', 'rb') as guide_3:
        bot.send_photo(message.chat.id, photo=guide_3, caption=texts['guide_3'], parse_mode='Markdown',
                       show_caption_above_media=True)
    with open('media/guide_4.png', 'rb') as guide_4:
        bot.send_photo(message.chat.id, photo=guide_4, caption=texts['guide_4'], parse_mode='Markdown',
                       show_caption_above_media=True)


@bot.message_handler(func=lambda message: message.text == "üîë –ö–ª—é—á–∏")
def show_keys(message):
    keys = db.get_user_keys(message.from_user.id)
    if not keys:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞", callback_data="payment"))
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É.", reply_markup=markup)
    for key in keys:
        remaining_time = db.get_remaining_time(key.key_id)
        formated_time = utils.format_remaining_time(remaining_time)
        bot.send_message(message.chat.id, "*–°–µ—Ä–≤–µ—Ä:* VendekVPN ‚ñ∫ Netherlands üá≥üá±\n\n"
                                          f"–í–∞—à –∫–ª—é—á: _#{key.key_id}_\n"
                                          f"–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: _{formated_time}_"
                                          f"```{key.access_url + texts['connection_name']}```", parse_mode='Markdown')


@bot.message_handler(func=lambda message: message.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
def support(message):
    with open('media/support.png', 'rb') as img:
        bot.send_photo(message.chat.id, photo=img, caption=texts['support_message'], parse_mode='Markdown')


@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
def info(message):
    bot.send_message(message.chat.id, texts['about'], parse_mode='Markdown')


#####################################
#              –û–ü–õ–ê–¢–ê               #
#####################################

@bot.callback_query_handler(func=lambda call: call.data == "payment")
def payment_options(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data="1_month"),
               types.InlineKeyboardButton("2 –º–µ—Å—è—Ü–∞", callback_data="2_month"),
               types.InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞", callback_data="3_month"),
               types.InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ["1_month", "2_month", "3_month"])
def payment_amount(call):
    months = int(call.data.split('_')[0])  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤
    amount_options = [(80 * months) * i for i in range(1, 6)]  # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—É–º–º –¥–ª—è –æ–ø–ª–∞—Ç—ã
    markup = types.InlineKeyboardMarkup(row_width=3)

    for amount in amount_options:
        markup.add(types.InlineKeyboardButton(f"{amount}‚ÇΩ", callback_data=f"pay_{amount}"))

    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id,
                     f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å {months} –º–µ—Å—è—Ü(–∞) –¥–æ—Å—Ç—É–ø–∞? –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞—Ç–∏—Ç—å. –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –∑–∞ 1 –º–µ—Å—è—Ü, –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –≤—ã –ø–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.",
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("pay_"))
def process_payment(call):
    amount = int(call.data.split('_')[1])  # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ callback_data
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
    # –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è


@bot.callback_query_handler(func=lambda call: call.data == "cancel")
def cancel_payment(call):
    markup = keyboard_create(menu_buttons)
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, "–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –µ—â–µ?", reply_markup=markup)


if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ telegram –±–æ—Ç–∞...")
    bot.polling(none_stop=True)
